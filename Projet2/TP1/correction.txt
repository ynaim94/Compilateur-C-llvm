Dans le code fourni la grammaire a été modifiée et une structure expression_symbols a été implémentée pour illustrer le fonctionnement des actions
et le fonctionnement des attributs pour les non-terminaux de la grammaire avec %type.

On a donné aux non-terminaux primary_expression postfix_expression unary_expression multiplicative_expression additive_expression
un attribut de type struct expression_symbol *.

./parse addition_simple.c permet d'afficher le résultat de l'expression 2 + 3 * 2.0

Attention le code fourni et la structure expression_symbols ne sont pas à utiliser dans votre projet!
Il s'agit juste d'un exemple.

4. Vous devez implémenter une structure de donnée (ex: struct type *) permettant de décrires les types du langage, à savoir :
- les entiers
- les flottants
- les fonctions avec le nombre de paramètres leurs types et le type de retour

5. Si l'on souhaite donner comme type : struct type * à declarator, le problème est de pouvoir récupérer le type qui a été créé dans la règle type_name.
On a par exemple l'arbre de dérivation suivant pour le code

int a, b;

                          declaration
                              |
          --------------------------------
          |                              |
     type_name                      declarator_list
          |                               |
         INT                       ---------------------
                                   |                   |
                           declarator_list          declarator
                                  |                    |
                              declarator            IDENTIFIER
                                  |                    |
                              IDENTIFIER               b
                                  |
                                  a

Plusieurs solutions s'offrent à vous, entre autres:

- Avoir une variable globale struct type *last_type qui est affectée à chaque fois qu'on rentre dans la règle type_name.
  Ensuite lorsqu'on on rentre dans la règle declarator on peut faire $$ = last_type;

- Accéder aux attributs hérités en utilisant $0,$-1, etc.. voir: http://epaperpress.com/lexandyacc/attr.html

- Dans la règle declarator, créer un symbol: $$ = create_symbol(name);
  Dans la règle declatator_list, créer une liste de symboles: $$ = list_append($1, $2)
  Dans la règle declaration affecter le bon type à chaque symbole de la liste: for symbol s in $2, $2->type = $1
  %union {
    struct symbol *s;
    struct type *t;
    struct list_symbol *l;
    ...
  };
  %type <s> declarator
  %type <t> type_name
  %type <l> declarator_list

6. On rentre dans un nouveau bloc à chaque fois qu'il y a une accolade ouvrante et on en sort à chaque fois qu'il y a une accolade fermante,
   une solution possible et donc de remplacer les '{' et '}' dans compound_statement par 2 nouvelles règles:
   LB : '{'
   {
     level++;
   }
   ;

   RB : '{'
   {
     level++;
   }
   ;

7. Chaque déclaration de variable doit être stockée dans une table des symboles avec son type, vous devez avoir une table des symboles par bloc (voir cours).
   Lorsque une variable est utilisée on doit pouvoir vérifier qu'elle a bien été préalablement déclarée sinon signaler une erreur.
   Pour la vérification de type, l'affectation d'un entier à un double sera légale mais devra afficher un warning:
   int a;
   double b;
   a = b;
